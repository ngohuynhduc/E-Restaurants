import { NextFunction, Response } from 'express';
import dotenv from 'dotenv';
import jwt from 'jsonwebtoken';

export const authenticateToken = (req: any, res: Response, next: NextFunction) => {
  dotenv.config();

  const JWT_SECRET = process.env.ACCESS_TOKEN_SECRET || 'scret-key';
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ message: 'Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c' });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as any;

    (req as any).user = decoded;
    next();
  } catch (error) {
    return res.status(403).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
  }
};

export const optionalAuthentication = (req: any, res: Response, next: NextFunction) => {
  dotenv.config();
  const JWT_SECRET = process.env.ACCESS_TOKEN_SECRET || 'scret-key';
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    (req as any).user = null;
    return next();
  }

  try {
    // X√°c th·ª±c token
    const decoded = jwt.verify(token, JWT_SECRET) as any;
    // Th√™m th√¥ng tin ng∆∞·ªùi d√πng v√†o request
    (req as any).user = decoded;
    next();
  } catch (error) {
    console.log('üöÄ ~ optionalAuthentication ~ error:', error);
    // Token kh√¥ng h·ª£p l·ªá, coi nh∆∞ user ch∆∞a ƒëƒÉng nh·∫≠p
    (req as any).user = null;
    next();
  }
};
